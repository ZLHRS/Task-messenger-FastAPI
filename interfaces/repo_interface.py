from typing import Protocol, Optional, TypeVar, Iterable


T = TypeVar('T', covariant=True)
CreateT = TypeVar('CreateT', contravariant=True)


class BaseRepoInterface(Protocol[T, CreateT]):
    async def get_by_id(self, id_obj: int) -> Optional[T]: ...
    async def get_all(self) -> Iterable[T]: ...
    async def create_obj(self, obj: CreateT) -> T: ...
    async def delete_obj(self, obj: int) -> None: ...

class UserRepoInterface(BaseRepoInterface[T, CreateT], Protocol):
    async def get_user_by_username(self, username: str) -> Optional[T]: ...